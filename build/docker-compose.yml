services:
  # PostgreSQL 数据库服务
  postgres:
    image: postgres:15
    container_name: pixishelf-db
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: pixishelf
      POSTGRES_USER: pixishelf
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - pixishelf-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pixishelf -d pixishelf"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # 统一的 Web + API 服务容器
  app:
    build:
      context: ..
      dockerfile: build/Dockerfile
      target: production
    container_name: pixishelf-app
    ports:
      - "5430:5430"  # Web 服务端口
      - "5555:5555"  # Web 服务端口
    environment:
      # API 环境变量
      NODE_ENV: production
      DATABASE_URL: postgresql://pixishelf:password@postgres:5432/pixishelf?connection_limit=20&pool_timeout=20
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      API_TOKEN: your-api-token-change-this
    volumes:
      # 挂载图片数据目录（根据实际需要调整路径）
      # - /path/to/your/images:/app/data:ro
      - C:\Users\Administrator\Downloads\pixiv:/app/data:cached  # 开发环境示例
    networks:
      - pixishelf-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "20m" # 单个日志文件最大 20MB
        max-file: "10"    # 最多保留 10 个日志文件

  # imgproxy 服务容器
  imgproxy:
    image: ghcr.io/imgproxy/imgproxy:latest
    ports:
      - '5431:5431' # 将 ImgProxy 的 8080 端口映射到宿主机
    volumes:
      # 关键：将存储原图的文件夹挂载到 ImgProxy 容器中
      - C:\Users\Administrator\Downloads\pixiv:/data:ro
    environment:
      - IMGPROXY_BIND=:5431
      # 允许 ImgProxy 处理来自本地文件系统的图片
      - IMGPROXY_USE_FILESYSTEM=true
      # 设置 ImgProxy 可以访问的根目录
      - IMGPROXY_LOCAL_FILESYSTEM_ROOT=/data
      - IMGPROXY_ENABLE_VIDEO_THUMBNAILS=true
      - IMGPROXY_MAX_SRC_FILE_SIZE=0
      - IMGPROXY_MAX_SRC_RESOLUTION=1000
    networks:
      - pixishelf-network

  thumbor:
    # 使用官方的 Thumbor 镜像
    build:
      context: ..
      dockerfile: build/thumbor/Dockerfile
  # 给我们自己构建的镜像起个名字
    image: thumbor-video:latest
    container_name: thumbor_video
    restart: always
    ports:
      - "5433:80"
    volumes:
      - C:\Users\Administrator\Downloads\pixiv:/media:ro  # 'ro' 表示只读，更安全
    environment:
      # 设置日志级别，方便调试
      - LOG_LEVEL=debug
      - QUALITY=80
      - WEBP_QUALITY=80
      - ALLOW_UNSAFE_URL=True
      - LOADER=thumbor.loaders.file_loader
      - FILE_LOADER_ROOT_PATH=/media
      - ENGINE=thumbor_video_engine.engines.video
      - GIF_ENGINE=thumbor_video_engine.engines.gif
      - FFMPEG_USE_GIFSICLE_ENGINE=True
      - FFMPEG_GIF_AUTO_WEBP=True
      - FFMPEG_GIF_AUTO_H265=True
      - APP_CLASS=thumbor_video_engine.app.ThumborServiceApp
      - RESULT_STORAGE=thumbor_video_engine.result_storages.file_storage
      - FILTERS=['thumbor_video_engine.filters.format','thumbor_video_engine.filters.still']
volumes:
  postgres_data:

networks:
  pixishelf-network:
    driver: bridge
