services:
  # PostgreSQL 数据库服务
  postgres:
    image: postgres:15
    container_name: pixishelf-db
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: pixishelf
      POSTGRES_USER: pixishelf
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - pixishelf-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pixishelf -d pixishelf"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # 统一的 Web + API 服务容器
  app:
    build:
      context: ..
      dockerfile: build/Dockerfile
      target: production
    container_name: pixishelf-app
    ports:
      - "5430:80"  # Web 服务端口
      - "3000:3000"  # Web 服务端口
      - "5555:5555"  # Web 服务端口
    environment:
      # API 环境变量
      NODE_ENV: production
      DATABASE_URL: postgresql://pixishelf:password@postgres:5432/pixishelf?connection_limit=20&pool_timeout=20
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      API_TOKEN: your-api-token-change-this
    volumes:
      # 挂载图片数据目录（根据实际需要调整路径）
      # - /path/to/your/images:/app/data:ro
      - C:\Users\Administrator\Downloads\pixiv:/app/data:cached  # 开发环境示例
    networks:
      - pixishelf-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:

networks:
  pixishelf-network:
    driver: bridge
