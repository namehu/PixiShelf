# 生产部署用的 Docker Compose 文件
# 使用预构建的镜像，不进行本地构建
# 默认加载同目录下的 .env 文件

services:
  postgres:
    image: postgres:15
    container_name: pixishelf-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - pixishelf-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pixishelf -d pixishelf"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # 统一的 Web + API 服务容器 - 使用预构建镜像
  app:
    image: docker.io/dockernamehu/pixishelf:${IMAGE_TAG:-latest}
    container_name: pixishelf-app
    ports:
      - "5430:5430"   # Web 服务端口（Nginx）
    env_file:
      - .env
    environment:
      # 覆盖生产环境特定配置
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?connection_limit=20&pool_timeout=20
    volumes:
      # 挂载图片目录 - 根据实际需要调整路径
      - ./data:/app/data:ro  # 只读挂载图片目录
    networks:
      - pixishelf-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  imgproxy:
    image: ghcr.io/imgproxy/imgproxy:latest
    ports:
      - '5431:5431' # 将 ImgProxy 的 8080 端口映射到宿主机
    volumes:
      # 关键：将存储原图的文件夹挂载到 ImgProxy 容器中
      - ./data:/data
    environment:
      - IMGPROXY_BIND=:5431
      # 允许 ImgProxy 处理来自本地文件系统的图片
      - IMGPROXY_USE_FILESYSTEM=true
      # 设置 ImgProxy 可以访问的根目录
      - IMGPROXY_LOCAL_FILESYSTEM_ROOT=/data
      - IMGPROXY_MAX_SRC_FILE_SIZE=0
      - IMGPROXY_MAX_SRC_RESOLUTION=1000
    networks:
      - pixishelf-network

  thumbor:
  # 给我们自己构建的镜像起个名字
    image: dockernamehu/pixishelf-thumbor:latest
    restart: always
    ports:
      - "5433:80"
    networks:
      - pixishelf-network
    volumes:
      - ./data:/media:ro  # 'ro' 表示只读，更安全
    environment:
      # 设置日志级别，方便调试
      # - LOG_LEVEL=debug
      - QUALITY=80
      - WEBP_QUALITY=80
      - ALLOW_UNSAFE_URL=True
      - LOADER=thumbor.loaders.file_loader
      - FILE_LOADER_ROOT_PATH=/media
      - ENGINE=thumbor_video_engine.engines.video
      - GIF_ENGINE=thumbor_video_engine.engines.gif
      - FFMPEG_USE_GIFSICLE_ENGINE=True
      - FFMPEG_GIF_AUTO_WEBP=True
      - FFMPEG_GIF_AUTO_H265=True
      - APP_CLASS=thumbor_video_engine.app.ThumborServiceApp
      - RESULT_STORAGE=thumbor_video_engine.result_storages.file_storage
      - FILTERS=['thumbor_video_engine.filters.format','thumbor_video_engine.filters.still']
volumes:
  postgres_data:

networks:
  pixishelf-network:
    driver: bridge
