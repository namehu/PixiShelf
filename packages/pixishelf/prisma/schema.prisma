generator client {
  provider      = "prisma-client-js"
  output   = "./generated/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 定义翻译来源的枚举类型
// 这会映射到 PostgreSQL 的原生 ENUM 类型，便于管理和扩展
enum TranslateType {
  NONE     // 0-无
  PIXIV    // 1-pixiv
  AI       // 2-AI
  MANUAL   // 3-人工标注
}

model Artist {
  id              Int       @id @default(autoincrement())
  name            String
  username        String?
  userId          String?
  bio             String?
  avatar          String?   // 头像
  backgroundImg   String?   // 背景图
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  artworks        Artwork[]

  @@unique([username, userId], name: "unique_username_userid")
}

model Artwork {
  id                 Int          @id @default(autoincrement())
  title              String
  description        String?
  artistId           Int?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  descriptionLength  Int          @default(0)
  directoryCreatedAt DateTime?
  imageCount         Int          @default(0)
  bookmarkCount      Int?
  externalId         String?
  isAiGenerated      Boolean?
  originalUrl        String?
  size               String?
  sourceDate         DateTime?
  sourceUrl          String?
  thumbnailUrl       String?
  xRestrict          String?
  artist             Artist?      @relation(fields: [artistId], references: [id])
  artworkTags        ArtworkTag[]
  images             Image[]

  @@index([directoryCreatedAt])
  @@index([imageCount])
  @@index([sourceDate])
  @@index([externalId])
}

model Tag {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  name_zh       String?       // 中文翻译列
  translateType TranslateType @default(NONE) // 翻译类型，使用枚举
  description   String?       // 标签描述
  artworkCount  Int           @default(0) // 作品数量缓存
  createdAt    DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  artworkTags   ArtworkTag[]

  // [新增] 告诉 Prisma 这个列存在，但由数据库管理
  search_vector Unsupported("tsvector")?

  @@index([name])
  @@index([name_zh]) // [新增] 为中文翻译列增加索引，提高查询速度
  @@index([artworkCount], map: "Tag_artworkCount_idx")

  // [新增] 告诉 Prisma 这个 GIN 索引是存在的
  // 注意：需要启用 previewFeatures = ["extendedIndexes"]
  @@index([search_vector], type: Gin)
}

model ArtworkTag {
  id        Int      @id @default(autoincrement())
  artworkId Int
  tagId     Int
  createdAt DateTime @default(now())
  artwork   Artwork  @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([artworkId, tagId])
}

model Image {
  id        Int      @id @default(autoincrement())
  path      String
  width     Int?
  height    Int?
  size      Int?
  sortOrder Int      @default(0)
  artworkId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  artwork   Artwork? @relation(fields: [artworkId], references: [id])

  @@unique([artworkId, path], name: "unique_artwork_path")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String?
  type      String   @default("string")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TriggerLog {
  id            Int      @id @default(autoincrement())
  operation     String   @db.VarChar(10)
  table_name    String   @db.VarChar(50)
  record_id     Int?
  old_value     Int?
  new_value     Int?
  error_message String?  @db.Text
  created_at    DateTime @default(now()) @db.Timestamp()

  @@index([created_at])
  @@index([operation])
  @@index([table_name, record_id])
}
